{"version":3,"file":"static/js/535.9fe9a4a6.chunk.js","mappings":"wMACA,EAA0B,6BAA1B,EAA8D,0BAA9D,EAAiG,4B,UCDpFA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EACtBC,EAAc,SAAAH,GAAK,OAAIA,EAAMC,SAASG,KAAnB,EACnBC,EAAkB,SAAAL,GAAK,OAAIA,EAAMC,SAASG,KAAnB,EACvBE,EAAe,SAAAN,GAAK,OAAIA,EAAMO,MAAV,E,SCEpBC,EAAc,WACzB,IAAMP,GAAWQ,EAAAA,EAAAA,IAAYV,GAC7BW,QAAQC,IAAIV,GACZ,IAAMW,GAAWC,EAAAA,EAAAA,MAmBjB,OACE,gBAAKC,UAAWC,EAAhB,UACE,kBAAMC,SAnBW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAc,CAClBC,KAAMH,EAAEI,OAAOC,SAASC,KAAKC,MAC7BC,OAAQR,EAAEI,OAAOC,SAASI,IAAIF,OAGnBvB,EAAS0B,KAAI,SAAAC,GAAI,OAAIA,EAAKR,IAAT,IACrBS,SAASV,EAAYC,MAC5BU,MAAM,GAAD,OAAIX,EAAYC,KAAhB,4BAELR,GAASmB,EAAAA,EAAAA,IAAWZ,IAGtBF,EAAEI,OAAOW,OACV,EAIiClB,UAAWC,EAAzC,WACE,4BACE,kBACEkB,KAAK,OACLb,KAAK,OACLc,YAAY,OACZC,QAAQ,oBACRC,MAAM,yIACNC,UAAQ,OAGZ,4BACE,kBACEJ,KAAK,MACLb,KAAK,MACLc,YAAY,SACZC,QAAQ,2EACRC,MAAM,+FACNC,UAAQ,OAGZ,mBAAQvB,UAAWC,EAAYkB,KAAK,SAApC,6BAMP,ECvDD,EAA+B,kCAA/B,EAA6E,+BAA7E,EAA0H,iC,UCU7GK,EAAc,WACzB,IAAMrC,GAAWQ,EAAAA,EAAAA,IAAYV,GACvBwC,GAAc9B,EAAAA,EAAAA,IAAYH,GAC1BkC,GAAY/B,EAAAA,EAAAA,IAAYJ,GACxBD,GAAQK,EAAAA,EAAAA,IAAYN,GACpBS,GAAWC,EAAAA,EAAAA,MAGX4B,EAAmBxC,EAASM,QAAO,SAAAqB,GAAI,OAC3CA,EAAKR,KAAKsB,cAAcb,SAASU,EAAYG,cADF,IAQ7C,OAJAC,EAAAA,EAAAA,YAAU,WACR/B,GAASgC,EAAAA,EAAAA,MACV,GAAE,CAAChC,KAGF,gBAAIE,UAAWC,EAAf,UACGyB,IAAcpC,IAAS,yCACvBA,IAAS,uBAAIA,IACbqC,EAAiBd,KAAI,SAAAC,GAAI,OACxB,gBAAId,UAAWC,EAAf,UACGa,EAAKR,KADR,KACgBQ,EAAKH,QACnB,mBACEX,UAAWC,EACXkB,KAAK,SACLb,KAAMQ,EAAKR,KACXyB,QAAS,kBAAMjC,GAASkC,EAAAA,EAAAA,IAAclB,EAAKmB,IAAlC,EAJX,iBAFoCnB,EAAKmB,GADnB,MAe/B,E,UC3CYC,EAAS,WACpB,IAAMpC,GAAWC,EAAAA,EAAAA,MAMjB,OACE,4BACE,kBACEoB,KAAK,OACLb,KAAK,SACL6B,SAToB,SAAAhC,GACxBL,GAASsC,EAAAA,EAAAA,GAAcjC,EAAEI,OAAOG,OACjC,EAQKU,YAAY,4BAInB,E,UCfKiB,EAAS,CACbC,UAAW,CACTC,UAAW,sBACXC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,SAChBC,OAAQ,iBACRC,aAAc,OACdC,MAAO,qBACPC,UAAW,yCAkBf,EAdiB,WACf,OACE,iBAAKC,MAAOX,EAAOC,UAAnB,WACE,SAACW,EAAA,EAAD,WACE,2CAEF,SAACvD,EAAD,KACA,sCACA,SAACwC,EAAD,KACA,SAACV,EAAD,MAGL,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ContactForm_wrapper__-Umw-\",\"form\":\"ContactForm_form__dhl+T\",\"addBtn\":\"ContactForm_addBtn__CACuJ\"};","export const selectContacts = state => state.contacts.items;\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoading = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n","import { useDispatch, useSelector } from 'react-redux';\nimport css from './ContactForm.module.css';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  console.log(contacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const contactItem = {\n      name: e.target.elements.text.value,\n      number: e.target.elements.tel.value,\n    };\n\n    const name = contacts.map(item => item.name);\n    if (name.includes(contactItem.name)) {\n      alert(`${contactItem.name} is alredy in contacts.`);\n    } else {\n      dispatch(addContact(contactItem));\n    }\n\n    e.target.reset();\n  };\n\n  return (\n    <div className={css.wrapper}>\n      <form onSubmit={handleSubmit} className={css.form}>\n        <label>\n          <input\n            type=\"text\"\n            name=\"text\"\n            placeholder=\"Name\"\n            pattern=\"^[A-Za-z.'\\- ]+$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label>\n          <input\n            type=\"tel\"\n            name=\"tel\"\n            placeholder=\"Number\"\n            pattern=\"^\\+?\\d{1,4}?\\s?\\(?\\d{1,4}?\\)?\\s?\\d{1,4}\\s?\\d{1,4}\\s?\\d{1,9}$\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button className={css.addBtn} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"item_contact\":\"ContactList_item_contact__7f2K5\",\"deleteBtn\":\"ContactList_deleteBtn__1dg25\",\"contactList\":\"ContactList_contactList__UFVCg\"};","import { useDispatch, useSelector } from 'react-redux';\nimport css from './ContactList.module.css';\nimport { deleteContact, fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectContacts,\n  selectFilter,\n  selectIsLoading,\n  selectError,\n} from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filterValue = useSelector(selectFilter);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  //Funkcja filtruje kontakty na podstawie przekazanej tablicy (contacts) i stringa (filter)\n  const filteredContacts = contacts.filter(item =>\n    item.name.toLowerCase().includes(filterValue.toLowerCase())\n  );\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ul className={css.contactList}>\n      {isLoading && !error && <p>Is loading...</p>}\n      {error && <p>{error}</p>}\n      {filteredContacts.map(item => (\n        <li className={css.item_contact} key={item.id}>\n          {item.name}: {item.number}\n          <button\n            className={css.deleteBtn}\n            type=\"button\"\n            name={item.name}\n            onClick={() => dispatch(deleteContact(item.id))}\n          >\n            x\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { filterContact } from 'redux/contacts/sliceFilter';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const inputFilterChange = e => {\n    dispatch(filterContact(e.target.value));\n  };\n\n  return (\n    <label>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        onChange={inputFilterChange}\n        placeholder=\" Find contacts by name\"\n      />\n    </label>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Helmet } from 'react-helmet';\n\nconst styles = {\n  container: {\n    minHeight: 'calc(100vh - 100px)',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    border: '1px solid gray',\n    borderRadius: '10px',\n    color: 'rgb(155, 129, 115)',\n    boxShadow: '8px 8px 24px 0px rgba(66, 68, 90, 1)',\n  },\n};\n\nconst Contacts = () => {\n  return (\n    <div style={styles.container}>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <ContactForm />\n      <h1>Contacts</h1>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectError","error","selectIsLoading","selectFilter","filter","ContactForm","useSelector","console","log","dispatch","useDispatch","className","css","onSubmit","e","preventDefault","contactItem","name","target","elements","text","value","number","tel","map","item","includes","alert","addContact","reset","type","placeholder","pattern","title","required","ContactList","filterValue","isLoading","filteredContacts","toLowerCase","useEffect","fetchContacts","onClick","deleteContact","id","Filter","onChange","filterContact","styles","container","minHeight","display","flexDirection","alignItems","justifyContent","border","borderRadius","color","boxShadow","style","Helmet"],"sourceRoot":""}